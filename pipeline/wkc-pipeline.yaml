apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-deploy
spec:
  params:
  - description: docker registry namespace.  Choose something unique.  If using the local OpenShift registry, make this the same as NAMESPACE.
    name: docker-namespace
    type: string
  - description: namespace to deploy control plane to.  If nobody has deployed fybrik on this cluster before, choose fybrik-system.
    name: NAMESPACE
    type: string
  - description: namespace to deploy blueprints to. Name will be derived from control plane namespace.  If control plane namespace is set to fybrik-system; this will default to fybrik-blueprints.
    name: blueprintNamespace
    type: string
  - default: wcp-ibm-streams-docker-local.artifactory.swg-devops.com
    description: docker registry hostname.  This is where images will be pushed once built
    name: docker-hostname
    type: string
  - default: wcp-ibm-streams-docker-local.artifactory.swg-devops.com/pipelines-tutorial
    description: where to pull dockerhub images from.
    name: dockerhub-hostname
    type: string
  - default: mesh-for-data 
    description: namespace in us.icr.io where images will be pushed for VA scan
    name: va-scan-namespace
    type: string
  - description: url of the git repo for the code of deployment
    name: git-url
    type: string
    default: git@github.ibm.com:IBM-Data-Fabric/mesh-for-data.git
  - default: pipeline
    description: branch/revision to be used from repo of the code for deployment
    name: git-revision
    type: string
  - description: url of the git repo for the code of deployment
    name: wkc-connector-git-url
    type: string
    default: git@github.ibm.com:ngoracke/WKC-connector.git
  - description: url of the git repo for the data fabric control plane
    name: data-fabric-git-url
    type: string
    default: git@github.ibm.com:IBM-Data-Fabric/data-fabric-control-plane.git
  - description: wkc catalog id for testing
    name: catalogID
    default: 46328147-09d9-42e2-9987-a46c8f38002f
    type: string
  - description: wkc asset id for testing
    name: assetID
    default: bd8495a7-601e-46da-ab43-6b77254b9d51
    type: string    
  - description: url of the git repo for the code of deployment
    name: vault-plugin-secrets-wkc-reader-url
    type: string
    default: git@github.ibm.com:data-mesh-research/vault-plugin-secrets-wkc-reader.git
  - default: master
    description: branch/revision to be used from repo of the code for deployment
    name: wkc-connector-git-revision
    type: string
  - default: master
    description: branch/revision to be used from repo of the code for deployment
    name: data-fabric-git-revision
    type: string
  - default: "false"
    description: deploy vault or no.  If deploying to the fybrik-system namespace, make this true.
    name: deployVault
    type: string
  - default: 'cluster.name="AmsterdamCluster",cluster.zone="Netherlands",cluster.region="Netherlands",cluster.vaultAuthPath="kubernetes",coordinator.catalog="WKC",coordinator.catalogConnectorURL="data-fabric-control-plane-service:50090",coordinator.credentialsManager="WKC",coordinator.credentialsManagerConnectorURL="data-fabric-control-plane-service:50090",coordinator.policyManager="WKC",coordinator.policyManagerConnectorURL="data-fabric-control-plane-service:50090"'
    description: values to pass to helm install of mesh-for-data charts
    type: string
    name: mesh-for-data-values
  - default: "/workspace/source/vault-plugin-secrets-wkc-reader/helm-deployment/vault-single-cluster/vault-rbac.yaml"
    description: roles to create when deploying vault
    name: vaultRoles
    type: string
  - default: "/workspace/source/vault-plugin-secrets-wkc-reader/helm-deployment/vault-single-cluster/values.yaml"
    description: values file for use when helm deploying vault
    name: vaultValues
    type: string
  - default: "wcp-ibm-streams-docker-local.artifactory.swg-devops.com/elvis_build/suede_compile:latest"
    description: image to use for build
    name: build_image
    type: string
  - default: "wcp-ibm-streams-docker-local.artifactory.swg-devops.com/pipelines-tutorial/k8s-helm"
    description: image to use for helm
    name: helm_image
    type: string
  - default: "false"
    description: Skip Integration Tests
    name: skipTests
    type: string
  - default: "false"
    description: deploy CRDs or no.  If deploying to the fybrik-system namespace, make this true.
    name: deployCRD
    type: string
  - default: "false"
    description: deploy certmanager or no.  If deploying to the fybrik-system namespace, and bedrock is not installed, make this true.
    name: deployCertManager
    type: string
  - default: "false"
    description: install cluster scoped helm resources.  If deploying to the fybrik-system namespace, make this true
    name: clusterScoped
    type: string
  - default: "https://cpd-tooling-2q21-cpd.apps.cpstreamsx6.cp.fyre.ibm.com"
    description: cpd url
    name: DataFabricControlPlaneServerUrl 
    type: string
  - default: manager
    description: image name for the manager.  Only necessary to switch this if you want to swap back and forth between alternate images
    name: MANAGER_IMAGE
    type: string
  - default: katalog-connector
    description: image name for the katalog-connector.  Only necessary to switch this if you want to swap back and forth between alternate images
    name: KATALOG_IMAGE
    type: string
  - default: dummy-mover
    description: image name for the dummy data mover.  Only necessary to switch this if you want to swap back and forth between alternate images
    name: dummy-image
    type: string
  - description: Not currently used.  Leave as-is
    name: deployment-name
    type: string
    default: fybrik
  - description: Used only when restarting tasks.  Do not fill
    name: IMAGE_DIGEST
    type: string
    default: "none"
  - description: Used only when restarting tasks.  Do not fill
    name: IMAGE_NAME
    type: string
    default: "none"
  - description: Used only when restarting tasks.  Do not fill
    name: IMAGE_ID
    type: string
    default: "none"
  - description: Used only when restarting tasks.  Do not fill
    name: COMPONENT_NAME
    type: string
    default: "all"
  - description: Used only when restarting tasks.  Do not fill
    name: INCREMENTAL_RESTART 
    type: string
    default: "false"
  - description: Used only when restarting tasks.  Do not fill
    name: INCREMENTAL_CODE_RESTART 
    type: string
    default: "false"
  - description: Transfer images to icr
    name: transfer-images-to-icr
    type: string
    default: "false"
  - description: url of the git repo for the code of deployment
    name: proprietary-git-url
    type: string
    default: https://github.ibm.com/IBM-Data-Fabric/proprietary.git
  - default: kritika-dataFabricCharts
    description: branch/revision to be used from repo of the code for deployment
    name: proprietary-git-revision
    type: string
  - default: "false"
    name: OVERWRITE_SECRETS
    type: string
  tasks:
  #git@github.ibm.com:data-mesh-research/WKC-connector.git
  - name: fetch-vault-plugin-secrets-wkc-reader
    params:
    - name: url
      value: $(params.vault-plugin-secrets-wkc-reader-url)
    - name: subdirectory
      value: "vault-plugin-secrets-wkc-reader"
    - name: deleteExisting
      value: "true"
    - name: revision
      value: master
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    - name: sslVerify
      value: "false"
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: fetch-proprietary
    params:
    - name: url
      value: $(params.proprietary-git-url)
    - name: subdirectory
      value: "proprietary"
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.proprietary-git-revision)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    - name: sslVerify
      value: "false"
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"  
  - name: fetch-data-fabric-control-plane
    params:
    - name: url
      value: $(params.data-fabric-git-url)
    - name: subdirectory
      value: "data-fabric-control-plane"
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.data-fabric-git-revision)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    - name: sslVerify
      value: "false"
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true" 
  - name: fetch-wkc-connector
    params:
    - name: url
      value: $(params.wkc-connector-git-url)
    - name: subdirectory
      value: "WKC-connector"
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.wkc-connector-git-revision)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    - name: sslVerify
      value: "false"
    runAfter:
    - fetch-data-fabric-control-plane
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: fetch-repository
    params:
    - name: url
      value: $(params.git-url)
    - name: subdirectory
      value: "mesh-for-data"
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.git-revision)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: fetch-secrets-from-vault
    params:
    - name: context
      value: /workspace/source/
    - name: command
      value: |
        sh fetch-secrets-from-vault.sh
        kubectl create namespace $(params.NAMESPACE) || true
        if [[ "$params.OVERWRITE_SECRETS" == "true" ]]
        then
          kubectl delete secret -n $(params.NAMESPACE) generic pg-creds || true
          kubectl delete configmap -n $(params.NAMESPACE) custom-maven-settings || true
          kubectl delete secret -n $(params.NAMESPACE) generic pg-secret-cr || true
          kubectl delete cm -n $(params.NAMESPACE) env-conf || true
        fi
        kubectl create secret -n $(params.NAMESPACE) generic pg-creds --from-file=bootstrap-sensitive-config.properties=./bootstrap-sensitive-config.properties || true
        kubectl create configmap -n $(params.NAMESPACE) custom-maven-settings --from-file=settings.xml || true
        kubectl create secret -n $(params.NAMESPACE) generic pg-secret-cr --from-file=postgres.crt=./postgres.crt || true
        cat <<EOF >> bootstrap-config.properties 
        spring.jpa.properties.hibernate.default_schema=m4d_latha
        namespace=$(params.NAMESPACE)-app
        EOF
        kubectl create cm -n $(params.NAMESPACE)  env-conf --from-file=bootstrap-config.properties=./bootstrap-config.properties || true

        # rm -f ./postgres.crt
        # rm -f ./settings.xml
        # rm -f ./bootstrap-sensitive-config.properties
    taskRef:
      kind: Task
      name: shell
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: build-wkc-connector
    params:
    - name: target
      value: build
    - name: context
      value: WKC-connector/java
    - name: image
      value: $(params.build_image)
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-wkc-connector
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-data-fabric-control-plane
    params:
    - name: CONTEXT_DIR
      value: data-fabric-control-plane/
    - name: GOALS
      value:
        - -DskipTests
        - clean
        - install
    runAfter:
    - build-wkc-connector
    taskRef:
      name: maven
    workspaces:
    - name: maven-settings
      workspace: maven-settings
    - name: source
      workspace: shared-workspace
  - name: pre-data-fabric-image-build
    params:
    - name: context
      value: /workspace/source/
    - name: command
      value: |
        mv /workspace/source/WKC-connector /workspace/source/data-fabric-control-plane
        mkdir -p data-fabric-control-plane/target/dependency && (cd data-fabric-control-plane/target/dependency; jar -xf ../*.jar)
    runAfter:
    - build-data-fabric-control-plane
    taskRef:
      kind: Task
      name: shell
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: build-image-data-fabric-control-plane
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/data-fabric-control-plane
    - name: TLSVERIFY
      value: "false"
    - name: DOCKERFILE
      value: dockerfile
    - name: CONTEXT
      value: /workspace/source/data-fabric-control-plane/
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.dockerhub-hostname)
    - name: HELM_PROPERTY
      value: Image.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    runAfter:
    - pre-data-fabric-image-build
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "WKC-connector/java"
  - name: transfer-image-wkc-connector-vulnerability-advisor
    retries: 3
    taskRef:
      kind: Task
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/data-fabric-control-plane@$(tasks.build-image-data-fabric-control-plane.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/$(params.va-scan-namespace)/wkc-connector@$(tasks.build-image-data-fabric-control-plane.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-manager
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/manager
    - name: image
      value: $(params.build_image)
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: "$(params.blueprintNamespace)"
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-manager
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/$(params.MANAGER_IMAGE)
    - name: TLSVERIFY
      value: "false"
    - name: DOCKERFILE
      value: mesh-for-data/manager/Dockerfile
    - name: CONTEXT
      value: mesh-for-data/manager
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: HELM_PROPERTY
      value: manager.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    runAfter:
    - build-manager
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/manager"
  - name: transfer-image-manager-vulnerability-advisor
    retries: 3
    taskRef:
      kind: Task
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/$(params.MANAGER_IMAGE)@$(tasks.build-image-manager.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/$(params.va-scan-namespace)/$(params.MANAGER_IMAGE)@$(tasks.build-image-manager.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-image-dummy-mover
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/$(params.dummy-image)
    - name: DOCKERFILE
      value: mesh-for-data/test/dummy-mover/Dockerfile.dummy-mover
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.dockerhub-hostname)
    - name: HELM_PROPERTY
      value: dummymover.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/dummy-mover"
  - name: transfer-image-dummy-mover-vulnerability-advisor
    retries: 3
    taskRef:
      kind: Task
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/$(params.dummy-image)@$(tasks.build-image-dummy-mover.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/$(params.va-scan-namespace)/$(params.dummy-image)@$(tasks.build-image-dummy-mover.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-katalog
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/connectors/katalog
    - name: image
      value: $(params.build_image)
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-katalog
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/katalog-connector
    - name: DOCKERFILE
      value: mesh-for-data/connectors/katalog/Dockerfile
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: CONTEXT
      value: mesh-for-data/connectors/katalog
    - name: HELM_PROPERTY
      value: katalogConnector.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    runAfter:
    - build-katalog
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/connectors/katalog"
  - name: transfer-image-katalog-connector-vulnerability-advisor
    retries: 3
    taskRef:
      kind: Task
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/katalog-connector@$(tasks.build-image-katalog.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/$(params.va-scan-namespace)/katalog-connector@$(tasks.build-image-katalog.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-opa
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/connectors/opa
    - name: image
      value: $(params.build_image)
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-opa
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/opa-connector
    - name: DOCKERFILE
      value: mesh-for-data/connectors/opa/Dockerfile
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: CONTEXT
      value: mesh-for-data/connectors/opa
    - name: HELM_PROPERTY
      value: opaConnector.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    runAfter:
    - build-opa
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/connectors/opa"
  - name: transfer-image-opa-connector-vulnerability-advisor
    retries: 3
    taskRef:
      kind: Task
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/opa-connector@$(tasks.build-image-opa.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/$(params.va-scan-namespace)/opa-connector@$(tasks.build-image-opa.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-datacatalog
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/test/services/datacatalog
    - name: image
      value: $(params.build_image)
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-datacatalog
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/data-catalog-mock
    - name: DOCKERFILE
      value: mesh-for-data/test/services/datacatalog/Dockerfile
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: CONTEXT
      value: mesh-for-data/test/services/datacatalog
    - name: HELM_PROPERTY
      value: datacatalog.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: "$(params.blueprintNamespace)"
    runAfter:
    - build-datacatalog
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/test/services/datacatalog"
  - name: transfer-image-datacatalog-vulnerability-advisor
    retries: 3
    taskRef:
      kind: Task
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/data-catalog-mock@$(tasks.build-image-datacatalog.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/$(params.va-scan-namespace)/data-catalog-mock@$(tasks.build-image-datacatalog.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-servicepolicymanager
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/test/services/policymanager
    - name: image
      value: $(params.build_image)
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-serverpolicymanager
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/serverpolicymanager-mock
    - name: DOCKERFILE
      value: mesh-for-data/test/services/policymanager/Dockerfile
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: CONTEXT
      value: mesh-for-data/test/services/policymanager
    - name: HELM_PROPERTY
      value: servicepolicymanager.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: blueprintNamespace
      value: $(params.blueprintNamespace)
    runAfter:
    - build-servicepolicymanager
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/test/services/policymanager"
  - name: transfer-image-serverpolicymanager-vulnerability-advisor
    retries: 3
    taskRef:
      kind: Task
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/serverpolicymanager-mock@$(tasks.build-image-serverpolicymanager.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/$(params.va-scan-namespace)/serverpolicymanager-mock@$(tasks.build-image-serverpolicymanager.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: upgrade-helm-full
    params:
    - name: charts_dir
      value: /workspace/source/mesh-for-data/charts/fybrik
    - name: release_name
      value: fybrik
      # --values /workspace/source/pipeline/pullsecrets.yaml
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: blueprintNamespace=$(params.blueprintNamespace),clusterScoped=$(params.clusterScoped),manager.image=$(params.docker-hostname)/$(params.docker-namespace)/$(params.MANAGER_IMAGE)@$(tasks.build-image-manager.results.IMAGE_DIGEST),manager.chartVolume=charts-pvc,katalogConnector.image=$(params.docker-hostname)/$(params.docker-namespace)/$(params.KATALOG_IMAGE)@$(tasks.build-image-katalog.results.IMAGE_DIGEST),opaConnector.image=$(params.docker-hostname)/$(params.docker-namespace)/opa-connector@$(tasks.build-image-opa.results.IMAGE_DIGEST),cluster.name=$(params.NAMESPACE),coordinator.vault.address=http://$(params.NAMESPACE)-vault.$(params.NAMESPACE):8200,vault.address=http://$(params.NAMESPACE)-vault.$(params.NAMESPACE):8200,$(params.mesh-for-data-values)
    - name: release_version
      value: 0.1.0
    - name: image
      value: $(params.helm_image)
    runAfter:
    - build-image-manager
    - build-image-katalog
    - build-image-opa
    # don't need to wait on this
    - build-image-datacatalog
    taskRef:
      kind: Task
      name: helm-upgrade-from-source
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: upgrade-helm-partial
    params:
    - name: charts_dir
      value: /workspace/source/mesh-for-data/charts/fybrik
    - name: release_name
      value: fybrik --reuse-values
      # --values /workspace/source/pipeline/pullsecrets.yaml --reuse-values
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: $(params.IMAGE_ID)=$(params.IMAGE_NAME)@$(params.IMAGE_DIGEST)
    - name: release_version
      value: 0.1.0
    - name: image
      value: $(params.helm_image)
    taskRef:
      kind: Task
      name: helm-upgrade-from-source
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: notin
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: in
      Values:
      - "true"
  - name: upgrade-control-plane-helm-full
    params:
    - name: charts_dir
      value: /workspace/source/proprietary/charts/data-fabric-control-plane
    - name: release_name
      value: data-fabric-control-plane
      # --values /workspace/source/pipeline/pullsecrets.yaml
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: clusterScoped=$(params.clusterScoped),imagePullSecrets=,image.repository=$(params.docker-hostname),image.image=$(params.docker-namespace)/data-fabric-control-plane@$(tasks.build-image-data-fabric-control-plane.results.IMAGE_DIGEST),cluster.name=$(params.NAMESPACE),coordinator.vault.address=http://$(params.NAMESPACE)-vault:8200,controlPlane.vault.address=http://$(params.NAMESPACE)-vault:8200,controlPlane.serverURL=$(params.DataFabricControlPlaneServerUrl)
    - name: release_version
      value: 0.1.0
    - name: image
      value: $(params.helm_image)
    runAfter:
    - build-image-data-fabric-control-plane
    taskRef:
      kind: Task
      name: helm-upgrade-from-source
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: upgrade-control-plane-helm-partial
    params:
    - name: charts_dir
      value: /workspace/source/proprietary/charts/data-fabric-control-plane
    - name: release_name
      value: data-fabric-control-plane --reuse-values
      # --values /workspace/source/pipeline/pullsecrets.yaml --reuse-values
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: $(params.IMAGE_ID)=$(params.IMAGE_NAME)@$(params.IMAGE_DIGEST)
    - name: release_version
      value: 0.1.0
    - name: image
      value: $(params.helm_image)
    taskRef:
      kind: Task
      name: helm-upgrade-from-source
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: notin
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: in
      Values:
      - "true"
  - name: upgrade-helm-crd-from-source
    params:
    - name: charts_dir
      value: /workspace/source/mesh-for-data/charts/fybrik-crd
    - name: release_name
      value: fybrik-crd
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: release_version
      value: 0.1.0
    - name: image
      value: $(params.helm_image)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: helm-upgrade-from-source
    when:
    - Input: $(params.deployCRD)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: run-flight-tests
    params:
    - name: image
      value: $(params.dockerhub-hostname)/tester:latest
    - name: context
      value: .
    - name: command
      value: |
        echo "#!/bin/bash" > /workspace/source/proprietary/tests/exports
        echo "export IBM_NGINX_ROUTE=$(params.DataFabricControlPlaneServerUrl)" >> /workspace/source/proprietary/tests/exports
        echo "export ADMIN_USER=$(kubectl get secret wkc-credentials -o jsonpath="{.data.WKC_username}" | base64 --decode)" >> /workspace/source/proprietary/tests/exports
        echo "export ADMIN_PASSWORD=$(kubectl get secret wkc-credentials -o jsonpath="{.data.WKC_password}" | base64 --decode)" >> /workspace/source/proprietary/tests/exports
        
        echo "export IBM_NGINX_ROUTE=$(params.wkcConnectorServerUrl)" >> /workspace/source/proprietary/tests/exports
        echo "export ADMIN_USER=$(kubectl get secret wkc-credentials -o jsonpath="{.data.CP4D_USERNAME}" | base64 --decode)" >> /workspace/source/proprietary/tests/exports
        echo "export ADMIN_PASSWORD=$(kubectl get secret wkc-credentials -o jsonpath="{.data.CP4D_PASSWORD}" | base64 --decode)" >> /workspace/source/proprietary/tests/exports
        echo "export CP4D_URL=$(kubectl get secret wkc-credentials -o jsonpath="{.data.CP4D_SERVER_URL}" | base64 --decode)" >> /workspace/source/proprietary/tests/exports
        echo "export BLUEPRINT_NAMESPACE=$(params.blueprintNamespace)" >> /workspace/source/proprietary/tests/exports
        echo "export CATALOG_ID=$(params.catalogID)" >> /workspace/source/proprietary/tests/exports
        echo "export ASSET_ID=$(params.assetID)" >> /workspace/source/proprietary/tests/exports
        source /workspace/source/proprietary/tests/exports
        sed -i 's|asset_id*,|asset_id": "$(params.assetID)",|g' /workspace/source/proprietary/tests/app.yaml
        sed -i 's|catalog_id*}|catalog_id": "$(params.catalogID)"}|g' /workspace/source/proprietary/tests/app.yaml

        token=$(curl -k -X POST --header "Content-Type: application/json" -d '{"username":"'${ADMIN_USER}'","password":"'${ADMIN_PASSWORD}'"}' ${CP4D_URL}/icp4d-api/v1/authorize | jq .token)
        echo $token

        oc get secret -n $(params.NAMESPACE)-app wkc-credentials -o yaml > /tmp/secret
        oc delete secret -n $(params.NAMESPACE)-app wkc-credentials
        yq w -i /tmp/secret data.WKC_ownerId OTk5
        yq w -i /tmp/secret data.WKC_password $(echo -n $ADMIN_PASSWORD | base64)
        yq w -i /tmp/secret data.WKC_username $(echo -n $ADMIN_USER | base64)
        yq w -i /tmp/secret data.WKC_token $(echo -n $token | base64 -w 0)
        oc create -f /tmp/secret

        cat /workspace/source/proprietary/tests/app.yaml
        oc apply -f /workspace/source/proprietary/tests/app.yaml -n $(params.NAMESPACE)-app
        oc wait fybrikapplication -n $(params.NAMESPACE)-app jw-cpd-app-x4 --for=condition=Ready
        sleep 10
        echo "export BLUEPRINT_SVC=$(oc get fybrikapplication -n $(params.NAMESPACE)-app jw-cpd-app-x4 -o jsonpath={.status.readEndpointsMap..hostname})" >> /workspace/source/proprietary/tests/exports
        source /workspace/source/proprietary/tests/exports
        pushd /workspace/source/proprietary/tests/ && nose2
    runAfter:
    - update-flight-module
    - upgrade-control-plane-helm-full
    taskRef:
      kind: Task
      name: shell
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: restart-wkc-pod
    params:
    - name: image
      value: $(params.dockerhub-hostname)/suede:latest
    - name: context
      value: .
    - name: command
      value: |
        sleep 30
        export po=$(oc get po -l app.kubernetes.io/component=data-fabric-control-plane --no-headers | grep "ImagePullBackOff" | cut -d' ' -f1)
        if [[ ! -z ${po} ]]; then
          oc delete po ${po}
        fi
    runAfter:
    - upgrade-control-plane-helm-full
        MAX_TRIES=30
        TRIES=0
        while [[ ${TRIES} -lt ${MAX_TRIES} ]]; do
            set +e
            helm list -a | grep wkc-connector
            rc=$?
            if [[ $rc -eq 0 ]]; then
                TRIES=${MAX_TRIES}
            fi
            TRIES=$((TRIES+1))
            sleep 3
        done

        MAX_TRIES=30
        TRIES=0
        while [[ ${TRIES} -lt ${MAX_TRIES} ]]; do
            set +e
            export po=$(oc get po -l app.kubernetes.io/component=wkc-connector --no-headers | grep "ImagePullBackOff" | cut -d' ' -f1)
            if [[ ! -z ${po} ]]; then
                oc delete po ${po}
                TRIES=${MAX_TRIES}
            fi
            TRIES=$((TRIES+1))
            sleep 3
        done

    runAfter:
    - build-image-wkc-connector
    taskRef:
      kind: Task
      name: shell
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: update-flight-module
    params:
    - name: image
      value: $(params.dockerhub-hostname)/suede:latest
    - name: context
      value: .
    - name: command
      value: |
        oc wait --for condition=established --timeout=180s crd/fybrikmodules.app.fybrik.io
        sed -i.bak 's|      global.cpdUrl: .*|      global.cpdUrl: $(params.DataFabricControlPlaneServerUrl) |g' /workspace/source/proprietary/modules/wdp-connect-flight-module.yaml
        oc apply -f /workspace/source/proprietary/modules/wdp-connect-flight-module.yaml
    runAfter:
    - fetch-proprietary
    taskRef:
      kind: Task
      name: shell
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: update-helm-vault-values
    params:
    - name: image
      value: $(params.dockerhub-hostname)/suede:latest
    - name: context
      value: .
    - name: command
      value: |
        sed -i 's|fybrik-blueprints|$(params.blueprintNamespace)|g' $(params.vaultValues)
        sed -i 's|fybrik-system|$(params.NAMESPACE)|g' $(params.vaultValues)
    runAfter:
    - fetch-vault-plugin-secrets-wkc-reader
    taskRef:
      kind: Task
      name: shell
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.deployVault)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: oc-apply-proprietary-charts
    params:
    - name: image
      value: $(params.dockerhub-hostname)/suede:latest
    - name: command
      value: |
        oc cp /workspace/source/proprietary/charts workspace-0:/opt/fybrik/
    runAfter:
    - fetch-proprietary
    taskRef:
      kind: Task
      name: shell
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: update-helm-vault-roles
    params:
    - name: image
      value: $(params.dockerhub-hostname)/suede:latest
    - name: context
      value: .
    - name: command
      value: |
        sed -i 's|namespace: .*|namespace: $(params.NAMESPACE)|g' $(params.vaultRoles)
        sed -i 's|name: role-tokenreview-binding|name: $(params.NAMESPACE)-role-tokenreview-binding|g' $(params.vaultRoles)
        sed -i 's|name: vault-secrets-manager|name: $(params.NAMESPACE)-vault-secrets-manager|g' $(params.vaultRoles)
        sed -i 's|name: vault|name: $(params.NAMESPACE)-vault|g' $(params.vaultRoles)
#        sed -i '0,/name: vault$/{s/name: vault$/name: $(params.NAMESPACE)-vault/}' $(params.vaultRoles)
    runAfter:
    - fetch-vault-plugin-secrets-wkc-reader
    taskRef:
      kind: Task
      name: shell
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.deployVault)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: oc-apply-vault-crds
    params:
    - name: ARGS
      value:
      - apply -f $(params.vaultRoles)
        -n $(params.NAMESPACE)
    runAfter:
    - update-helm-vault-roles
    taskRef:
      kind: Task
      name: openshift-client
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: upgrade-helm-vault-from-repo
    params:
    - name: helm_repo
      value: https://helm.releases.hashicorp.com
    - name: chart_name
      value: hashicorp/vault --values $(params.vaultValues)
        --create-namespace
      # old values 
      # --values https://raw.githubusercontent.com/mesh-for-data/mesh-for-data/v0.1.0/third_party/vault/vault-single-cluster/values.yaml
    - name: release_version
      value: 0.9.1
    - name: release_name
      value: $(params.NAMESPACE)-vault
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: server.dev.enabled=true,injector.enabled=true,global.openshift=true,server.image.repository=$(params.dockerhub-hostname)/vault,injector.agentImage.repository=$(params.dockerhub-hostname)/vault,injector.image.repository=$(params.dockerhub-hostname)/vault-k8s
    - name: image
      value: $(params.helm_image)
    runAfter:
    - update-helm-vault-values
    - update-helm-vault-roles
    taskRef:
      kind: Task
      name: helm-upgrade-from-repo
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.deployVault)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: upgrade-helm-certmgr-from-repo
    params:
    - name: helm_repo
      value: https://charts.jetstack.io
    - name: chart_name
      value: jetstack/cert-manager --create-namespace
    - name: release_version
      value: v1.2.0
    - name: release_name
      value: cert-manager
    - name: release_namespace
      value: cert-manager 
    - name: overwrite_values
      value: installCRDs=true
    - name: image
      value: $(params.helm_image)
    taskRef:
      kind: Task
      name: helm-upgrade-from-repo
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.deployCertManager)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
#  - name: oc-install-flight-opensource-crds-absent
#    params:
#    - name: ARGS
#      value:
#      - apply -f https://github.com/fybrik/arrow-flight-module/releases/latest/download/module.yaml
#        -n $(params.NAMESPACE)
#    runAfter:
#    - upgrade-helm-crd-from-source
#    taskRef:
#      kind: Task
#      name: openshift-client
#    when:
#    - Input: $(params.IMAGE_DIGEST)
#      Operator: in
#      Values:
#      - "none"
#    - Input: $(params.INCREMENTAL_RESTART)
#      Operator: notin
#      Values:
#      - "true"
#    - Input: $(params.INCREMENTAL_CODE_RESTART)
#      Operator: notin
#      Values:
#      - "true"
#    workspaces:
#    - name: source
#      workspace: shared-workspace
#  - name: oc-install-flight-opensource-crds-present
#    params:
#    - name: ARGS
#      value:
#      - apply -f https://github.com/fybrik/arrow-flight-module/releases/latest/download/module.yaml
#        -n $(params.NAMESPACE)
#    taskRef:
#      kind: Task
#      name: openshift-client
#    when:
#    - Input: $(params.deployCRD)
#      Operator: in
#      Values:
#      - "false"
### Donot include Ask Nick
#    - Input: $(params.NAMESPACE)
#      Operator: in
#      Values:
#      - "fybrik-system"
### End donot include 
#    - Input: $(params.IMAGE_DIGEST)
#      Operator: in
#      Values:
#      - "none"
#    - Input: $(params.INCREMENTAL_RESTART)
#      Operator: notin
#      Values:
#      - "true"
#    - Input: $(params.INCREMENTAL_CODE_RESTART)
#      Operator: notin
#      Values:
#      - "true"
#    workspaces:
#    - name: source
#      workspace: shared-workspace
  - name: run-integration-tests-full-deploy
    params:
    - name: target
      value: run-integration-tests
    - name: context
      value: mesh-for-data/manager
    - name: image
      value: $(params.build_image)
    - name: flags
      value: DOCKER_HOSTNAME=$(params.docker-hostname) DOCKER_NAMESPACE=$(params.docker-namespace) CONTROLLER_NAMESPACE=$(params.NAMESPACE) BLUEPRINT_NAMESPACE=$(params.blueprintNamespace)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - upgrade-helm-full
    - upgrade-control-plane-helm-full
    - build-image-datacatalog
    - build-image-serverpolicymanager
    when:
    - Input: $(params.skipTests)
      Operator: notin
      Values:
      - "true"
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: run-integration-tests-partial-deploy
    params:
    - name: target
      value: run-integration-tests
    - name: context
      value: mesh-for-data/manager
    - name: image
      value: $(params.build_image)
    - name: flags
      value: DOCKER_HOSTNAME=$(params.docker-hostname) DOCKER_NAMESPACE=$(params.docker-namespace) CONTROLLER_NAMESPACE=$(params.NAMESPACE) BLUEPRINT_NAMESPACE=$(params.blueprintNamespace)
    runAfter:
    - upgrade-helm-partial
    when:
    - Input: $(params.skipTests)
      Operator: notin
      Values:
      - "true"
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: run-unit-tests-full-deploy
    params:
    - name: target
      value: test
    - name: context
      value: mesh-for-data
    - name: flags
      value: CONTROLLER_NAMESPACE=$(params.NAMESPACE) BLUEPRINT_NAMESPACE=$(params.blueprintNamespace)
    - name: image
      value: $(params.build_image)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - upgrade-helm-full
    - upgrade-control-plane-helm-full
    when:
    - Input: $(params.skipTests)
      Operator: notin
      Values:
      - "true"
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: run-unit-tests-partial-deploy
    params:
    - name: target
      value: test
    - name: context
      value: mesh-for-data
    - name: flags
      value: CONTROLLER_NAMESPACE=$(params.NAMESPACE) BLUEPRINT_NAMESPACE=$(params.blueprintNamespace)
    - name: image
      value: $(params.build_image)
    runAfter:
    - upgrade-helm-partial
    - upgrade-control-plane-helm-partial
    when:
    - Input: $(params.skipTests)
      Operator: notin
      Values:
      - "true"
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
  finally:
  - name: finally-remove-creds
    params:
    - name: ARGS
      value:
      - delete secret git-ssh-key --ignore-not-found=true
        -n $(params.NAMESPACE)
    taskRef:
      kind: Task
      name: openshift-client
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: finally-remove-test-resources
    params:
    - name: ARGS
      value:
      - delete -f /workspace/source/proprietary/tests/app.yaml -n $(params.NAMESPACE)-app --ignore-not-found=true
    taskRef:
      kind: Task
      name: openshift-client
    workspaces:
    - name: source
      workspace: shared-workspace
  workspaces:
  - name: shared-workspace
  - name: artifacts
  - name: images-url
  - name: maven-settings
