apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-deploy
spec:
  params:
  - description: docker registry namespace.  Choose something unique.  If using the local OpenShift registry, make this the same as NAMESPACE.
    name: docker-namespace
    type: string
  - description: namespace to deploy control plane to.  If nobody has deployed m4d on this cluster before, choose m4d-system.
    name: NAMESPACE
    type: string
  - default: wcp-ibm-streams-docker-local.artifactory.swg-devops.com
    description: docker registry hostname.  This is where images will be pushed once built
    name: docker-hostname
    type: string
  - description: url of the git repo for the code of deployment
    name: git-url
    type: string
    default: git@github.ibm.com:IBM-Data-Fabric/mesh-for-data.git
  - default: pipeline
    description: branch/revision to be used from repo of the code for deployment
    name: git-revision
    type: string
  - description: url of the git repo for the code of deployment
    name: wkc-connector-git-url
    type: string
    default: git@github.ibm.com:ngoracke/WKC-connector.git
  - description: url of the git repo for the code of deployment
    name: vault-plugin-secrets-wkc-reader-url
    type: string
    default: git@github.ibm.com:data-mesh-research/vault-plugin-secrets-wkc-reader.git
  - default: master
    description: branch/revision to be used from repo of the code for deployment
    name: wkc-connector-git-revision
    type: string
  - default: "false"
    description: deploy vault or no.  If deploying to the m4d-system namespace, make this true.
    name: deployVault
    type: string
  - default: 'cluster.name="AmsterdamCluster",cluster.zone="Netherlands",cluster.region="Netherlands",cluster.vaultAuthPath="kubernetes",coordinator.catalog="WKC",coordinator.catalogConnectorURL="wkc-connector:50090"'
    description: values to pass to helm install of mesh-for-data charts
    type: string
    name: mesh-for-data-values
  - default: "/workspace/source/vault-plugin-secrets-wkc-reader/helm-deployment/vault-single-cluster/vault-rbac.yaml"
    description: roles to create when deploying vault
    name: vaultRoles
    type: string
  - default: "/workspace/source/vault-plugin-secrets-wkc-reader/helm-deployment/vault-single-cluster/values.yaml"
    description: values file for use when helm deploying vault
    name: vaultValues
    type: string
  - default: "false"
    description: Skip Integration Tests
    name: skipTests
    type: string
  - default: "false"
    description: deploy CRDs or no.  If deploying to the m4d-system namespace, make this true.
    name: deployCRD
    type: string
  - default: "false"
    description: deploy certmanager or no.  If deploying to the m4d-system namespace, and bedrock is not installed, make this true.
    name: deployCertManager
    type: string
  - default: "false"
    description: install cluster scoped helm resources.  If deploying to the m4d-system namespace, make this true
    name: clusterScoped
    type: string
  - default: "https://cpd-tooling-2q21-cpd.apps.cpstreamsx6.cp.fyre.ibm.com"
    description: cpd url
    name: wkcConnectorServerUrl 
    type: string
  - default: manager
    description: image name for the manager.  Only necessary to switch this if you want to swap back and forth between alternate images
    name: MANAGER_IMAGE
    type: string
  - default: katalog-connector
    description: image name for the katalog-connector.  Only necessary to switch this if you want to swap back and forth between alternate images
    name: KATALOG_IMAGE
    type: string
  - default: dummy-mover
    description: image name for the dummy data mover.  Only necessary to switch this if you want to swap back and forth between alternate images
    name: dummy-image
    type: string
  - description: Not currently used.  Leave as-is
    name: deployment-name
    type: string
    default: m4d
  - description: Used only when restarting tasks.  Do not fill
    name: IMAGE_DIGEST
    type: string
    default: "none"
  - description: Used only when restarting tasks.  Do not fill
    name: IMAGE_NAME
    type: string
    default: "none"
  - description: Used only when restarting tasks.  Do not fill
    name: IMAGE_ID
    type: string
    default: "none"
  - description: Used only when restarting tasks.  Do not fill
    name: COMPONENT_NAME
    type: string
    default: "all"
  - description: Used only when restarting tasks.  Do not fill
    name: INCREMENTAL_RESTART 
    type: string
    default: "false"
  - description: Used only when restarting tasks.  Do not fill
    name: INCREMENTAL_CODE_RESTART 
    type: string
    default: "false"
  - description: Transfer images to icr
    name: transfer-images-to-icr
    type: string
    default: "false"
  tasks:
  #git@github.ibm.com:data-mesh-research/WKC-connector.git
  - name: fetch-vault-plugin-secrets-wkc-reader
    params:
    - name: url
      value: $(params.vault-plugin-secrets-wkc-reader-url)
    - name: subdirectory
      value: "vault-plugin-secrets-wkc-reader"
    - name: deleteExisting
      value: "true"
    - name: revision
      value: master
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    - name: sslVerify
      value: "false"
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: fetch-wkc-connector
    params:
    - name: url
      value: $(params.wkc-connector-git-url)
    - name: subdirectory
      value: "WKC-connector"
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.wkc-connector-git-revision)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    - name: sslVerify
      value: "false"
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"  
  - name: fetch-repository
    params:
    - name: url
      value: $(params.git-url)
    - name: subdirectory
      value: "mesh-for-data"
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.git-revision)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  # - name: remove-creds
  #   params:
  #   - name: ARGS
  #     value:
  #     - delete secret git-ssh-key --ignore-not-found=true
  #       -n $(params.NAMESPACE)
  #   taskRef:
  #     kind: Task
  #     name: openshift-client
  #   runAfter:
  #   - fetch-repository
  #   - fetch-vault-plugin-secrets-wkc-reader
  #   - fetch-wkc-connector
  - name: build-wkc-connector
    params:
    - name: target
      value: build
    - name: context
      value: WKC-connector/java
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-wkc-connector
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-wkc-connector
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/wkc-connector
    - name: TLSVERIFY
      value: "false"
    - name: DOCKERFILE
      value: WKC-connector/Dockerfile.wkc_connector
    - name: CONTEXT
      value: WKC-connector/java
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=wcp-ibm-streams-docker-local.artifactory.swg-devops.com/pipelines-tutorial
    - name: HELM_PROPERTY
      value: wkcConnector.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    runAfter:
    - build-wkc-connector
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "WKC-connector/java"
  - name: transfer-image-wkc-connector-vulnerability-advisor
    retries: 3
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/wkc-connector@$(tasks.build-image-wkc-connector.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/ngoracke/wkc-connector@$(tasks.build-image-wkc-connector.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-manager
    params:
    - name: target
      value: managerforimage
    - name: context
      value: mesh-for-data/manager
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    # - Input: $(params.INCREMENTAL_CODE_RESTART)
    #   Operator: notin
    #   Values:
    #   - "true"
  # - name: rebuild-image
  #   params:
  #   - name: IMAGE
  #     value: $(params.docker-hostname)/$(params.docker-namespace)/$(params.MANAGER_IMAGE)
  #   - name: TLSVERIFY
  #     value: "false"
  #   - name: DOCKERFILE
  #     value: $(params.rebuild-image-dockerfile)
  #   - name: CONTEXT
  #     value: $(params.rebuild-image-context)
  #   - name: BUILD_EXTRA_ARGS
  #     value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
  #   - name: HELM_PROPERTY
  #     value: $(params.HELM_PROPERTY)
  #   - name: docker-hostname
  #     value: "$(params.docker-hostname)"
  #   - name: docker-namespace
  #     value: "$(params.docker-namespace)"
  #   taskRef:
  #     kind: Task
  #     name: buildah
  #   workspaces:
  #   - name: source
  #     workspace: shared-workspace
  #   when:
  #   - Input: $(params.IMAGE_DIGEST)
  #     Operator: in
  #     Values:
  #     - "none"
  #   - Input: $(params.INCREMENTAL_RESTART)
  #     Operator: notin
  #     Values:
  #     - "true"
  #   - Input: $(params.COMPONENT_NAME)
  #     Operator: notin
  #     Values:
  #     - "all"
  - name: build-image-manager
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/$(params.MANAGER_IMAGE)
    - name: TLSVERIFY
      value: "false"
    - name: DOCKERFILE
      value: mesh-for-data/manager/Dockerfile
    - name: CONTEXT
      value: mesh-for-data/manager
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: HELM_PROPERTY
      value: manager.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    runAfter:
    - build-manager
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/manager"
  - name: transfer-image-manager-vulnerability-advisor
    retries: 3
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/$(params.MANAGER_IMAGE)@$(tasks.build-image-manager.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/ngoracke/$(params.MANAGER_IMAGE)@$(tasks.build-image-manager.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-image-dummy-mover
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/$(params.dummy-image)
    - name: DOCKERFILE
      value: mesh-for-data/test/dummy-mover/Dockerfile.dummy-mover
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=wcp-ibm-streams-docker-local.artifactory.swg-devops.com/pipelines-tutorial
    - name: HELM_PROPERTY
      value: dummymover.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/dummy-mover"
  - name: transfer-image-dummy-mover-vulnerability-advisor
    retries: 3
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/$(params.dummy-image)@$(tasks.build-image-dummy-mover.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/ngoracke/$(params.dummy-image)@$(tasks.build-image-dummy-mover.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-katalog
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/connectors/katalog
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-katalog
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/katalog-connector
    - name: DOCKERFILE
      value: mesh-for-data/connectors/katalog/Dockerfile
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: CONTEXT
      value: mesh-for-data/connectors/katalog
    - name: HELM_PROPERTY
      value: katalogConnector.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    runAfter:
    - build-katalog
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/connectors/katalog"
  - name: transfer-image-katalog-connector-vulnerability-advisor
    retries: 3
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/katalog-connector@$(tasks.build-image-katalog.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/ngoracke/katalog-connector@$(tasks.build-image-katalog.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-opa
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/connectors/opa
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-opa
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/opa-connector
    - name: DOCKERFILE
      value: mesh-for-data/connectors/opa/Dockerfile
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: CONTEXT
      value: mesh-for-data/connectors/opa
    - name: HELM_PROPERTY
      value: opaConnector.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    runAfter:
    - build-opa
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/connectors/opa"
  - name: transfer-image-opa-connector-vulnerability-advisor
    retries: 3
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/opa-connector@$(tasks.build-image-opa.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/ngoracke/opa-connector@$(tasks.build-image-opa.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: build-datacatalog
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/test/services/datacatalog
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-datacatalog
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/data-catalog-mock
    - name: DOCKERFILE
      value: mesh-for-data/test/services/datacatalog/Dockerfile
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: CONTEXT
      value: mesh-for-data/test/services/datacatalog
    - name: HELM_PROPERTY
      value: datacatalog.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    runAfter:
    - build-datacatalog
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/test/services/datacatalog"
  # - name: skopeo-copy-image-data-catalog-mock
  #   taskRef:
  #     name: skopeo-copy-image
  #   workspaces:
  #     - name: source
  #       workspace: artifacts
  #   params:
  #     - name: source-image-repository
  #       value: "cp.stg.icr.io/cp/cpd/scan"
  #     - name: image-tags
  #       value: "latest"
  #     - name: source-image-digest
  #       value: "$(tasks.build-image-manager.results.IMAGE_DIGEST)"
  #     - name: target-image-repository
  #       value: "$(params.docker-hostname)/$(params.docker-namespace)/data-catalog-mock"
  #     - name: source-email
  #       value: "a@b.com"
  #     - name: target-email
  #       value: "a@b.com"
  #     - name: source-username
  #       value: "your-username"
  #     - name: target-username
  #       value: "your-username"
  #     - name: pipeline-debug
  #       value: "1"
  - name: transfer-image-datacatalog-vulnerability-advisor
    retries: 3
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/data-catalog-mock@$(tasks.build-image-datacatalog.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/ngoracke/data-catalog-mock@$(tasks.build-image-datacatalog.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  # - name: vulnerability-advisor-image-datacatalog-vulnerability
  #   taskRef:
  #     kind: Task
  #     name: containerize-check-va-scan
  #   workspaces:
  #     - name: artifacts
  #       workspace: artifacts
  #   runAfter:
  #   - transfer-image-datacatalog-vulnerability-advisor
  #   params:
  #     - name: image-url
  #       value: "stg.icr.io/cp/cpd/ngoracke/data-catalog-mock"
  #     - name: image-digest
  #       value: "$(tasks.build-image-datacatalog.results.IMAGE_DIGEST)"
  #     - name: scan-report-file
  #       value: 'app-image-va-report.json'
  #     - name: ibmcloud-api-key-secret-key
  #       value: "api-key"
  #     - name: fail-on-scanned-issues
  #       value: "false"
  #     - name: pipeline-debug
  #       value: "1"
  - name: build-servicepolicymanager
    params:
    - name: target
      value: source-build
    - name: context
      value: mesh-for-data/test/services/policymanager
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: build-image-serverpolicymanager
    params:
    - name: IMAGE
      value: $(params.docker-hostname)/$(params.docker-namespace)/serverpolicymanager-mock
    - name: DOCKERFILE
      value: mesh-for-data/test/services/policymanager/Dockerfile
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: --build-arg REGISTRY=$(params.docker-hostname)/$(params.docker-namespace)
    - name: CONTEXT
      value: mesh-for-data/test/services/policymanager
    - name: HELM_PROPERTY
      value: servicepolicymanager.image
    - name: docker-hostname
      value: "$(params.docker-hostname)"
    - name: docker-namespace
      value: "$(params.docker-namespace)"
    runAfter:
    - build-servicepolicymanager
    taskRef:
      kind: Task
      name: buildah
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.COMPONENT_NAME)
      Operator: in
      Values:
      - "all"
      - "mesh-for-data/test/services/policymanager"
  - name: transfer-image-serverpolicymanager-vulnerability-advisor
    retries: 3
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://$(params.docker-hostname)/$(params.docker-namespace)/serverpolicymanager-mock@$(tasks.build-image-serverpolicymanager.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://us.icr.io/ngoracke/serverpolicymanager-mock@$(tasks.build-image-serverpolicymanager.results.IMAGE_DIGEST)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    when:
    - Input: $(params.transfer-images-to-icr)
      Operator: in
      Values:
      - "true"
    workspaces:
      - name: images-url
        workspace: images-url
  - name: upgrade-helm-full
    params:
    - name: charts_dir
      value: /workspace/source/mesh-for-data/charts/m4d
    - name: release_name
      value: m4d
      # --values /workspace/source/pipeline/pullsecrets.yaml
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: clusterScoped=$(params.clusterScoped),manager.image=$(params.docker-hostname)/$(params.docker-namespace)/$(params.MANAGER_IMAGE)@$(tasks.build-image-manager.results.IMAGE_DIGEST),katalogConnector.image=$(params.docker-hostname)/$(params.docker-namespace)/$(params.KATALOG_IMAGE)@$(tasks.build-image-katalog.results.IMAGE_DIGEST),opaConnector.image=$(params.docker-hostname)/$(params.docker-namespace)/opa-connector@$(tasks.build-image-opa.results.IMAGE_DIGEST),cluster.name=$(params.NAMESPACE),coordinator.vault.address=http://vault.m4d-system:8200,vault.address=http://vault.m4d-system:8200,$(params.mesh-for-data-values)
    - name: release_version
      value: 0.1.0
    runAfter:
    - build-image-manager
    - build-image-katalog
    - build-image-opa
    # don't need to wait on this
    - build-image-datacatalog
    taskRef:
      kind: ClusterTask
      name: helm-upgrade-from-source
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: upgrade-helm-partial
    params:
    - name: charts_dir
      value: /workspace/source/mesh-for-data/charts/m4d
    - name: release_name
      value: m4d --reuse-values
      # --values /workspace/source/pipeline/pullsecrets.yaml --reuse-values
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: $(params.IMAGE_ID)=$(params.IMAGE_NAME)@$(params.IMAGE_DIGEST)
    - name: release_version
      value: 0.1.0
    taskRef:
      kind: ClusterTask
      name: helm-upgrade-from-source
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: notin
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: in
      Values:
      - "true"
  - name: upgrade-wkc-connector-helm-full
    params:
    - name: charts_dir
      value: /workspace/source/WKC-connector/charts/wkc-connector
    - name: release_name
      value: wkc-connector
      # --values /workspace/source/pipeline/pullsecrets.yaml
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: clusterScoped=$(params.clusterScoped),global.imagePullSecrets=,wkcConnector.image=$(params.docker-hostname)/$(params.docker-namespace)/wkc-connector@$(tasks.build-image-wkc-connector.results.IMAGE_DIGEST),cluster.name=$(params.NAMESPACE),coordinator.vault.address=http://vault.m4d-system:8200,wkcConnector.vault.address=http://vault.m4d-system:8200,wkcConnector.serverURL=$(params.wkcConnectorServerUrl)
    - name: release_version
      value: 0.1.0
    runAfter:
    - build-image-wkc-connector
    taskRef:
      kind: ClusterTask
      name: helm-upgrade-from-source
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: upgrade-wkc-connector-helm-partial
    params:
    - name: charts_dir
      value: /workspace/source/WKC-connector/charts/wkc-connector
    - name: release_name
      value: wkc-connector --reuse-values
      # --values /workspace/source/pipeline/pullsecrets.yaml --reuse-values
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: $(params.IMAGE_ID)=$(params.IMAGE_NAME)@$(params.IMAGE_DIGEST)
    - name: release_version
      value: 0.1.0
    taskRef:
      kind: ClusterTask
      name: helm-upgrade-from-source
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: notin
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: in
      Values:
      - "true"
  # - name: upgrade-helm-partial-code-to-image-update
  #   params:
  #   - name: charts_dir
  #     value: /workspace/source/charts/m4d
  #   - name: release_name
  #     value: m4d --values /workspace/source/pipeline/pullsecrets.yaml --reuse-values
  #   - name: release_namespace
  #     value: $(params.NAMESPACE)
  #   - name: overwrite_values
  #     value: $(params.IMAGE_ID)=$(params.IMAGE_NAME)@$(params.IMAGE_DIGEST)
  #   - name: release_version
  #     value: 0.1.0
  #   taskRef:
  #     kind: ClusterTask
  #     name: helm-upgrade-from-source
  #   workspaces:
  #   - name: source
  #     workspace: shared-workspace
  #   runAfter:
  #   - rebuild-image
  - name: upgrade-helm-crd-from-source
    params:
    - name: charts_dir
      value: /workspace/source/mesh-for-data/charts/m4d-crd
    - name: release_name
      value: m4d-crd
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: release_version
      value: 0.1.0
    runAfter:
    - fetch-repository
    taskRef:
      kind: ClusterTask
      name: helm-upgrade-from-source
    when:
    - Input: $(params.deployCRD)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: upgrade-helm-vault-from-repo
    params:
    - name: helm_repo
      value: https://helm.releases.hashicorp.com
    - name: chart_name
      value: hashicorp/vault --values $(params.vaultValues)
        --create-namespace
      # old values 
      # --values https://raw.githubusercontent.com/mesh-for-data/mesh-for-data/v0.1.0/third_party/vault/vault-single-cluster/values.yaml
    - name: release_version
      value: 0.9.1
    - name: release_name
      value: vault
    - name: release_namespace
      value: $(params.NAMESPACE)
    - name: overwrite_values
      value: server.dev.enabled=true,injector.enabled=false,global.openshift=true,server.image.repository=wcp-ibm-streams-docker-local.artifactory.swg-devops.com/pipelines-tutorial/vault
    runAfter:
    - fetch-vault-plugin-secrets-wkc-reader
    taskRef:
      kind: Task
      name: helm-upgrade-from-repo
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.deployVault)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: upgrade-helm-certmgr-from-repo
    params:
    - name: helm_repo
      value: https://charts.jetstack.io
    - name: chart_name
      value: jetstack/cert-mgr --create-namespace
    - name: release_version
      value: v1.2.0
    - name: release_name
      value: cert-manager
    - name: release_namespace
      value: cert-manager 
    - name: overwrite_values
      value: installCRDs=true
    taskRef:
      kind: ClusterTask
      name: helm-upgrade-from-repo
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.deployCertManager)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: oc-apply-vault-roles
    params:
    - name: ARGS
      value:
      - apply -f $(params.vaultRoles)
        -n $(params.NAMESPACE)
      # old rbac file
      # -f https://raw.githubusercontent.com/mesh-for-data/mesh-for-data/v0.1.0/third_party/vault/vault-single-cluster/vault-rbac.yaml
    runAfter:
    - upgrade-helm-vault-from-repo
    taskRef:
      kind: Task
      name: openshift-client
    workspaces:
    - name: source
      workspace: shared-workspace
    when:
    - Input: $(params.deployVault)
      Operator: in
      Values:
      - "true"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: oc-install-flight-opensource-crds-absent
    params:
    - name: ARGS
      value:
      - apply -f https://github.com/mesh-for-data/arrow-flight-module/releases/latest/download/module.yaml
        -n $(params.NAMESPACE)
    runAfter:
    - upgrade-helm-crd-from-source
    taskRef:
      kind: ClusterTask
      name: openshift-client
    when:
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: oc-install-flight-opensource-crds-present
    params:
    - name: ARGS
      value:
      - apply -f https://github.com/mesh-for-data/arrow-flight-module/releases/latest/download/module.yaml
        -n $(params.NAMESPACE)
    taskRef:
      kind: ClusterTask
      name: openshift-client
    when:
    - Input: $(params.deployCRD)
      Operator: in
      Values:
      - "false"
    - Input: $(params.NAMESPACE)
      Operator: in
      Values:
      - "m4d-system"
    - Input: $(params.IMAGE_DIGEST)
      Operator: in
      Values:
      - "none"
    - Input: $(params.INCREMENTAL_RESTART)
      Operator: notin
      Values:
      - "true"
    - Input: $(params.INCREMENTAL_CODE_RESTART)
      Operator: notin
      Values:
      - "true"
  - name: run-integration-tests-full-deploy
    params:
    - name: target
      value: run-integration-tests
    - name: context
      value: mesh-for-data/manager
    - name: flags
      value: DOCKER_HOSTNAME=$(params.docker-hostname)/$(params.docker-namespace)
    - name: INCREMENTAL_CODE_RESTART
      value: $(params.INCREMENTAL_CODE_RESTART)
    runAfter:
    - upgrade-helm-full
    - upgrade-wkc-connector-helm-full
    - build-image-datacatalog
    - build-image-serverpolicymanager
    when:
    - Input: $(params.skipTests)
      Operator: notin
      Values:
      - "true"
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
  - name: run-integration-tests-partial-deploy
    params:
    - name: target
      value: run-integration-tests
    - name: context
      value: mesh-for-data/manager
    - name: flags
      value: DOCKER_HOSTNAME=$(params.docker-hostname)/$(params.docker-namespace)
    runAfter:
    - upgrade-helm-partial
    when:
    - Input: $(params.skipTests)
      Operator: notin
      Values:
      - "true"
    taskRef:
      kind: Task
      name: make
    workspaces:
    - name: source
      workspace: shared-workspace
  finally:
  - name: finally-remove-creds
    params:
    - name: ARGS
      value:
      - delete secret git-ssh-key --ignore-not-found=true
        -n $(params.NAMESPACE)
    taskRef:
      kind: Task
      name: openshift-client
    workspaces:
    - name: source
      workspace: shared-workspace
  workspaces:
  - name: shared-workspace
  - name: artifacts
  - name: images-url
